(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}var _vendorTreemapSquarfiy=require("./vendor/treemap-squarfiy"),_vendorTreemapSquarfiy2=_interopRequireDefault(_vendorTreemapSquarfiy);

},{"./vendor/treemap-squarfiy":2}],2:[function(require,module,exports){
"use strict";function Container(t,e,i,r){this.xoffset=t,this.yoffset=e,this.height=r,this.width=i,this.shortestEdge=function(){return Math.min(this.height,this.width)},this.getCoordinates=function(t){var e,i=[],r=this.xoffset,n=this.yoffset,a=sumArray(t)/this.height,s=sumArray(t)/this.width;if(this.width>=this.height)for(e=0;e<t.length;e++)i.push([r,n,r+a,n+t[e]/a]),n+=t[e]/a;else for(e=0;e<t.length;e++)i.push([r,n,r+t[e]/s,n+s]),r+=t[e]/s;return i},this.cutArea=function(t){var e;if(this.width>=this.height){var i=t/this.height,r=this.width-i;e=new Container(this.xoffset+i,this.yoffset,r,this.height)}else{var n=t/this.width,a=this.height-n;e=new Container(this.xoffset,this.yoffset+n,this.width,a)}return e}}function normalize(t,e){var i,r=[],n=sumArray(t),a=e/n;for(i=0;i<t.length;i++)r[i]=t[i]*a;return r}function treemapMultidimensional(t,e,i,r,n){r="undefined"==typeof r?0:r,n="undefined"==typeof n?0:n;var a,s,h=[],o=[];if(isArray(t[0])){for(s=0;s<t.length;s++)h[s]=sumMultidimensionalArray(t[s]);for(a=treemapSingledimensional(h,e,i,r,n),s=0;s<t.length;s++)o.push(treemapMultidimensional(t[s],a[s][2]-a[s][0],a[s][3]-a[s][1],a[s][0],a[s][1]))}else o=treemapSingledimensional(t,e,i,r,n);return o}function treemapSingledimensional(t,e,i,r,n){r="undefined"==typeof r?0:r,n="undefined"==typeof n?0:n;var a=squarify(normalize(t,e*i),[],new Container(r,n,e,i),[]);return flattenTreemap(a)}function flattenTreemap(t){var e,i,r=[];for(e=0;e<t.length;e++)for(i=0;i<t[e].length;i++)r.push(t[e][i]);return r}function squarify(t,e,i,r){var n,a,s;return 0===t.length?void r.push(i.getCoordinates(e)):(n=i.shortestEdge(),a=t[0],improvesRatio(e,a,n)?(e.push(a),squarify(t.slice(1),e,i,r)):(s=i.cutArea(sumArray(e),r),r.push(i.getCoordinates(e)),squarify(t,[],s,r)),r)}function improvesRatio(t,e,i){var r;if(0===t.length)return!0;r=t.slice(),r.push(e);var n=calculateRatio(t,i),a=calculateRatio(r,i);return n>=a}function calculateRatio(t,e){var i=Math.min.apply(Math,t),r=Math.max.apply(Math,t),n=sumArray(t);return Math.max(Math.pow(e,2)*r/Math.pow(n,2),Math.pow(n,2)/(Math.pow(e,2)*i))}function isArray(t){return t&&t.constructor===Array}function sumArray(t){var e,i=0;for(e=0;e<t.length;e++)i+=t[e];return i}function sumMultidimensionalArray(t){var e,i=0;if(isArray(t[0]))for(e=0;e<t.length;e++)i+=sumMultidimensionalArray(t[e]);else i=sumArray(t);return i}Object.defineProperty(exports,"__esModule",{value:!0});var Treemap={};Treemap.generate=treemapMultidimensional,exports["default"]=Treemap,module.exports=exports["default"];

},{}]},{},[1]);
